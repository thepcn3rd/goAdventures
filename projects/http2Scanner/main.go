package main

// Setup the following for the application
/*

go env -w GOROOT="/usr/lib/go"
go env -w GOPATH="/home/thepcn3rd/go/workspaces/http2Scanner"

To compile the project, verify the structure is the same as below
// To cross compile for linux
// GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -o http2Scanner.bin -ldflags "-w -s" main.go

// To cross compile windows (Not tested...)
// GOOS=windows GOARCH=amd64 go build -o http2Scanner.exe -ldflags "-w -s" main.go

Install the module for http2
go get -u golang.org/x/net/http2


References:
Base of code used generated by ChatGPT 10/11/2023
URL: https://www.inanzzz.com/index.php/post/9ats/http2-and-tls-client-and-server-example-with-golang
URL: https://matthewparrilla.com/post/negotiation-http2-alpn-tls-handshake/
URL: https://tools.keycdn.com/http2-test
URL: https://celaldogan2010.medium.com/analyzing-http-2-with-wireshark-64c15793e91

DDoS POC
URL: https://github.com/imabee101/CVE-2023-44487/blob/main/main.py

*/

import (
	"bufio"
	"flag"
	"fmt"
	"net/http"
	"os"

	cf "github.com/thepcn3rd/goAdventures/projects/commonFunctions"

	"golang.org/x/net/http2"
)

func transport() *http2.Transport {
	return &http2.Transport{
		DisableCompression: true,
		AllowHTTP:          false,
	}
}

func checkHTTP2(url string) string {
	var message string
	//url := *urlPtr // Change this to the website you want to check

	// Create an HTTP client
	client := &http.Client{Transport: transport()}

	// Create an HTTP request
	resp, err := client.Get(url)
	if err != nil {
		//fmt.Println("Error getting response with the http/2 protocol")
		message = url + ", HTTP/2 is not supported"
		return message
	}

	if resp == nil {
		//fmt.Println("Error getting response with the http/2 protocol")
		message = url + ", HTTP/2 is not supported"
		return message
	}

	//fmt.Println(resp.Proto)

	// Check if HTTP/2 is supported
	if resp.Proto == "HTTP/2.0" {
		message = url + ", HTTP/2 is supported"
	} else {
		message = url + ", HTTP/2 is not supported"
	}
	return message
}

func main() {
	urlPtr := flag.String("url", "https://www.msn.com", "The URL of the website to check")
	listPtr := flag.String("list", "list.txt", "The file with a list of URLs to check")
	flag.Parse()

	if cf.IsFlagPassed("url") {
		m := checkHTTP2(*urlPtr)
		fmt.Println(m)
		os.Exit(0)
	} else if cf.IsFlagPassed("list") {
		file, err := os.Open(*listPtr)
		cf.CheckError("Unable to open file specified for the list of URLs", err, true)
		defer file.Close()
		scanner := bufio.NewScanner(file)
		for scanner.Scan() {
			url := scanner.Text()
			m := checkHTTP2(url)
			fmt.Println(m)
		}
		os.Exit(0)
	} else {
		fmt.Println("Please specify a URL or a list of URLs to check")
	}

}
