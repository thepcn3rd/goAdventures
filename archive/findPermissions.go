package main

import (
	"flag"
	"fmt"
	"os"
	"os/user"
	"strconv"
	"syscall"
)

/*

go env -w GOROOT="/usr/lib/go"
go env -w GOPATH="/home/thepcn3rd/go/workspaces/determineDaemonPermissions"

// To cross compile for linux
// GOOS=linux GOARCH=amd64 go build -o findPermissions.bin -ldflags "-w -s" main.go

// To work with parrot linux docker
// Manjaro uses glibc 2.32 2.34, the parrot linux docker uses 2.31 due to the difference CGO_ENABLED=0 will remove the dependency...
// GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -o findPermissions.bin main.go

// To cross compile windows
// GOOS=windows GOARCH=amd64 go build -o findPermissions.exe -ldflags "-w -s" main.go

// Core script generated by ChatGPT 9/26/2023

*/

func checkError(reason string, err error) {
	if err != nil {
		fmt.Printf("%s...\n", reason)
		fmt.Printf("%s", err)
		os.Exit(0)
	}
}

func isFlagPassed(name string) bool {
	found := false
	flag.Visit(func(f *flag.Flag) {
		if f.Name == name {
			found = true
		}
	})
	return found
}

func main() {
	// Define the process ID of the daemon you want to check.
	// Replace this with the actual PID of the daemon.
	daemonPIDPtr := flag.String("pid", "", "The PID of the daemon you want to check.")
	flag.Parse()

	if !isFlagPassed("pid") {
		fmt.Println("Error: No PID specified.")
		flag.Usage()
		os.Exit(0)
	}

	daemonPID, err := strconv.Atoi(*daemonPIDPtr)
	checkError("Error converting PID to string", err)

	// Get the user and group information of the daemon process.
	username, groupname, err := getProcessUserAndGroup(daemonPID)
	if err != nil {
		fmt.Printf("Error: %v\n", err)
		return
	}

	// Print the user and group information.
	fmt.Printf("Daemon with PID %d is running as user: %s, group: %s\n", daemonPID, username, groupname)
}

func getProcessUserAndGroup(pid int) (string, string, error) {
	// Get the UID and GID of the process.
	stat := syscall.Stat_t{}
	err := syscall.Stat(fmt.Sprintf("/proc/%d", pid), &stat)
	if err != nil {
		return "", "", err
	}

	// Get the username from UID.
	userInfo, err := user.LookupId(strconv.FormatUint(uint64(stat.Uid), 10))
	if err != nil {
		return "", "", err
	}

	// Get the groupname from GID.
	groupInfo, err := user.LookupGroupId(strconv.FormatUint(uint64(stat.Gid), 10))
	if err != nil {
		return "", "", err
	}

	return userInfo.Username, groupInfo.Name, nil
}
